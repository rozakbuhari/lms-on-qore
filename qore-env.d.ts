// [WARNING] This file is generated by running `$ qore codegen` on your root project, please do not edit

/// <reference types="@feedloop/qore-client" />
import { QoreSchema } from "@feedloop/qore-client";

declare module "@feedloop/qore-client" {
  type MemberTableRow = {
    id: string;
    email: string;
    role: { id: string; displayField: string };
    teachers: { nodes: TeachersTableRow[] };
    students: { nodes: StudentsTableRow[] };
    name: string;
    birthdate: Date;
    address: string;
    password: string;
  };

  type CoursesTableRow = {
    id: string;
    name: string;
    description: string;
    contents: { nodes: ContentsTableRow[] };
    teacher: TeacherTableRow;
    students1: { nodes: Students1TableRow[] };
    assessments: { nodes: AssessmentsTableRow[] };
  };

  type FilesTableRow = {
    id: string;
    name: string;
    content: string;
    courses: { nodes: CoursesTableRow[] };
  };

  type TeachersTableRow = {
    id: string;
    name: string;
    profile: ProfileTableRow;
    courses1: { nodes: Courses1TableRow[] };
  };

  type StudentsTableRow = {
    id: string;
    name: string;
    profile: ProfileTableRow;
    courses: { nodes: CoursesTableRow[] };
    assignments: { nodes: AssignmentsTableRow[] };
  };

  type AssessmentsTableRow = {
    id: string;
    name: string;
    description: string;
    course: CourseTableRow;
    assignments1: { nodes: Assignments1TableRow[] };
  };

  type AssignmentsTableRow = {
    id: string;
    name: string;
    student: StudentTableRow;
    assessment: AssessmentTableRow;
    score: number;
  };

  type AllMemberViewRow = {
    read: {
      id: string;
      email: string;
      role: { id: string; displayField: string };
      name: string;
      birthdate: Date;
      address: string;
      password: string;
    };
    write: {
      email: string;
      name: string;
      birthdate: Date;
      address: string;
      password: string;
    };
    params: {};
    actions: {};
  };

  type AllCoursesViewRow = {
    read: {
      id: string;
      name: string;
      description: string;
      contents: { nodes: ContentsTableRow[] };
      teacher: TeacherTableRow;
      students1: { nodes: Students1TableRow[] };
      assessments: { nodes: AssessmentsTableRow[] };
    };
    write: {
      name: string;
      description: string;
      contents: string[];
      teacher: string[];
      students1: string[];
      assessments: string[];
    };
    params: {};
    actions: {};
  };

  type AllFilesViewRow = {
    read: {
      id: string;
      name: string;
      content: string;
    };
    write: {
      name: string;
      content: string;
    };
    params: {};
    actions: {};
  };

  type AllTeachersViewRow = {
    read: {
      id: string;
      name: string;
      profile: ProfileTableRow;
      courses1: { nodes: Courses1TableRow[] };
    };
    write: {
      name: string;
      profile: string[];
      courses1: string[];
    };
    params: {};
    actions: {};
  };

  type AllStudentsViewRow = {
    read: {
      id: string;
      name: string;
      profile: ProfileTableRow;
      courses: { nodes: CoursesTableRow[] };
    };
    write: {
      name: string;
      profile: string[];
      courses: string[];
    };
    params: {};
    actions: {};
  };

  type AllAssessmentsViewRow = {
    read: {
      id: string;
      name: string;
      description: string;
      course: CourseTableRow;
    };
    write: {
      name: string;
      description: string;
      course: string[];
    };
    params: {};
    actions: {};
  };

  type AllAssignmentsViewRow = {
    read: {
      id: string;
      name: string;
      student: StudentTableRow;
      assessment: AssessmentTableRow;
      score: number;
    };
    write: {
      name: string;
      student: string[];
      assessment: string[];
      score: number;
    };
    params: {};
    actions: {};
  };

  interface ProjectSchema extends QoreSchema {
    allMember: AllMemberViewRow;
    allCourses: AllCoursesViewRow;
    allFiles: AllFilesViewRow;
    allTeachers: AllTeachersViewRow;
    allStudents: AllStudentsViewRow;
    allAssessments: AllAssessmentsViewRow;
    allAssignments: AllAssignmentsViewRow;
  }
}
